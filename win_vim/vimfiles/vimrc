" VIM-PLUG INSTALL ON WINDOWS
" iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`
"     ni $HOME/vimfiles/autoload/plug.vim -Force

" --- KEYMAP SETTING ---
let mapleader="\<Space>"
" --- KEYMAP SETTING END ---

" --- VIM PLUGINS CONFIGURE ---
call plug#begin()
Plug 'joshdick/onedark.vim'
Plug 'itchyny/lightline.vim'
Plug 'mhinz/vim-startify'
Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFocus', 'NERDTree', 'NERDTreeFind']  }
Plug 'skywind3000/vim-auto-popmenu'
Plug 'skywind3000/vim-dict'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
Plug 'junegunn/fzf.vim'
call plug#end()

" --- BASIC CONFIGURE ---
syntax on                           " turn syntax highlighting on by default
set nocompatible                    " use vim defaults
set showcmd                         " display incomplete commands
set showmatch                       " jump to matchs when entering parenthes
set matchtime=1                     " tenths of a secend to show the matching parenthes
set backspace=indent,eol,start      " make that backspace key work the way it should
set textwidth=0                     " don't wrap lines by default
set ruler                           " show the current row and column
set number                          " show line numbers
set wildmenu                        " show list instead of just completing
set splitright                      " put new split window in right
set fillchars=vert:│                " change vertsplite character
set ttimeoutlen=100                 " set <esc> response time
set nowrap                          " line exceed screen don't wrap
set sidescroll=1                    " line exceed screen cursor smooth scrolling
"set cursorline                     " highlight current line
set laststatus=2                    " always show statusline
"set noshowmode                     " don't show mode in command line(already show in statusline)
set scrolloff=2                     " keep <n> lines when scrolling
set numberwidth=5                   " line number width configure
set novisualbell                    " turn off visualbell
set noerrorbells                    " turn off errorbell
"set foldcolumn=1                   " keep <n> line to show fold
set hlsearch                        " highlight searchs
set incsearch                       " do incremental searching
set ignorecase                      " ignore case when searching
set smartcase                       " no ignorecase if Uppercase char present
set autoindent                      " always set autoindenting on
set smartindent                     " indent works for c-like
set tabstop=4                       " <Tab> width look for
set expandtab                       " expand <Tab> as spaces
set softtabstop=4                   " spaces number when insert <Tab>
set shiftround                      " indent not to multiple of 'shiftwidth'
set shiftwidth=4                    " number of spaces to use for (auto)indent
filetype plugin indent on
autocmd Filetype yaml set tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype lua set tabstop=2 shiftwidth=2 softtabstop=2
" --- BASIC CONFIGURE END ---

" --- BASIC KEYMAP ---
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
nnoremap <C-h> <C-w>h<CR>
nnoremap <C-j> <C-w>j<CR>
nnoremap <C-k> <C-w>k<CR>
nnoremap <C-l> <C-w>l<CR>
nnoremap H gT
nnoremap L gt
nnoremap T H
nnoremap B L
nnoremap <leader>bl :ls<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
" --- BASIC KEYMAP END ---

" --- NERDTREE CONFIGURE ---
nnoremap <leader>e :NERDTreeFocus<CR>
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" --- NERDTREE CONFIGURE END ---

" --- FZF CONFIGURE ---
let g:fzf_layout = { 'down': '40%'  }
function! s:find_git_root()
    return system('git rev-parse --show-toplevel')[:-2]
endfunction
command! ProjectFiles execute 'Files' s:find_git_root()
nnoremap <leader>f :ProjectFiles<CR>
nnoremap <leader>F :FZF<CR>
" --- FZF CONFIGURE END ---

" --- VIM-AUTO-POPMENU CONFIGURE ---
let g:apc_enable_ft = {'*':1}
set cpt=.,k,w,b
set completeopt=menu,menuone,noselect
set shortmess+=c
" --- VIM-AUTO-POPMENU CONFIGURE END ---

" --- COLORSTHEME CONFIGURE ---
set termguicolors
set background=dark
let g:onedark_terminal_italics=1
colorscheme onedark
let g:lightline = {
    \ 'colorscheme': 'onedark',
    \ 'separator': { 'left': '', 'right': ''  },
    \ 'subseparator': { 'left': '', 'right': ''  },
    \ }
" --- COLORSTHEME CONFIGURE END ---
